import boto3

def lambda_handler(event, context):
    dynamodb_resource = boto3.resource('dynamodb')

    # Specify the Appsync ID to look for in table names
    appsync_id = "x3q65mtrifd2lbcqpp262rxtci"

    # Get all table names
    dynamodb_client = boto3.client('dynamodb')
    response = dynamodb_client.list_tables()

    table_names = response.get('TableNames', [])

    # If there are more than 100 tables, continue paginating to fetch all tables
    while 'LastEvaluatedTableName' in response:
        response = dynamodb_client.list_tables(ExclusiveStartTableName=response['LastEvaluatedTableName'])
        table_names.extend(response.get('TableNames', []))

    # Iterate through table names and delete items if the table is associated with the Appsync ID
    for table_name in table_names:
        if appsync_id in table_name:
            delete_all_items(dynamodb_resource, table_name)

    return {
        'statusCode': 200,
        'body': 'Items deleted successfully from tables associated with the specified Appsync ID'
    }

def delete_all_items(resource, table_name):
    try:
        table = resource.Table(table_name)
        scan_kwargs = {}
        done = False
        start_key = None

        while not done:
            if start_key:
                scan_kwargs['ExclusiveStartKey'] = start_key

            # Scan the table to retrieve all items
            response = table.scan(**scan_kwargs)

            # Delete the items in batches
            with table.batch_writer() as batch:
                for each in response['Items']:
                    # Construct the key attributes from the table's key schema
                    key = {k['AttributeName']: each[k['AttributeName']] for k in table.key_schema}
                    batch.delete_item(Key=key)

            # Continue if there are more items to process
            start_key = response.get('LastEvaluatedKey', None)
            done = start_key is None

        print(f'Items deleted from table: {table_name}')

    except Exception as e:
        print(f'Error deleting items from table {table_name}: {e}')

# Testing the function
if __name__ == "__main__":
    lambda_handler(None, None)

